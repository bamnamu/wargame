import math
from Crypto.Util.number import getPrime
from Crypto.Random.random import randint

# GCD 함수
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Pollard의 Rho 알고리즘 구현
def pollards_rho(n):
    if n % 2 == 0:
        return 2
    x = randint(2, n - 1)
    y = x
    c = randint(1, n - 1)
    d = 1
    f = lambda x: (x*x + c) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x-y), n)
        if d == n:
            return pollards_rho(n)
    return d

# N을 소인수분해하는 함수
def factorize(N):
    factors = []
    def recurse(n):
        if n == 1:
            return
        if n <= 1:
            return
        if is_prime(n):
            factors.append(n)
            return
        divisor = pollards_rho(n)
        recurse(divisor)
        recurse(n // divisor)
    recurse(N)
    return factors

# 소수 판별 함수 (단순한 버전)
def is_prime(n):
    if n <= 1:
        return False
    i=2
    while(i*i<=n):
        if n % i == 0:
            return False
        i=i+1
    return True

n=int(input())
factors = factorize(n)
print(f"N의 소인수: {factors}")
#ncat 158.247.225.252 13370
"""
n = 50
N = 1087226603280000366206571222054100209257696227070613953019668841643564228004287466254550134203293792315108859009061415165341747472352708336467548610946722911452704921099819105579346744431865125134758822639763761831679564433077884506392075334253334456619836764442548041869173438515381632076983443748456059138827458087985102433579190738952328668692750673805032807119113496869981793468046802843046835912869552419781518262963588875568389908612870982729153416530816981204041252293625997118441905230025798324030567834457618121190501132417199649147645678935529694357475108347812901001152144322513442558001287418170391       
c = 1086417849909722220915018130778061595592259304650524821959256395683500295308742164986095962694651050329252563732155034647589476306823948542469027370034522987052620657971006324629460557609427918084013471536519487606204032266147335098880723477541438297657422469016608447403258707326435416329066067233724689593504034279323893321163579615968364855401741216825122823313611328943423713977783279267329477127585327392757283050073230571462799951812710976167486616358901877987324512341970220420285643738750624524613826717557489278240280922516141590307290831821848898577230315114022527309798376320879537377108512176932203 
"""