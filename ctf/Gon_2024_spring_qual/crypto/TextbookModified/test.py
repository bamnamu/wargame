import math
from Crypto.Util.number import getPrime
from Crypto.Random.random import randint

# GCD 함수
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Pollard의 Rho 알고리즘 구현 O(root(P))
def pollards_rho(n):
    if n==1:
        return 1
    if n % 2 == 0:
        return 2
    x = randint(2, n - 1)
    y = x
    c = randint(1, n - 1)
    d = 1
    f = lambda x: (x*x + c) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x-y), n)
        if d == n:
            return pollards_rho(n)
    return d

# N을 소인수분해하는 함수
def factorize(N):
    factors = []
    def recurse(n):
        if n == 1:
            return
        if n <= 1:
            return
        if n<=pow(2, 43):
            if is_prime(n):
                factors.append(n)
                return
        divisor = pollards_rho(n)
        recurse(divisor)
        recurse(n // divisor)
    recurse(N)
    return factors

def is_prime(n, k=5):  # Miller-Rabin 테스트를 k번 반복 O(k*log(n)^3)
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    
    # n-1 = 2^r * d 형태로 표현
    r, d = 0, n - 1
    while d % 2 == 0:
        r += 1
        d //= 2
    
    # 테스트 반복
    for _ in range(k):
        a = randint(2, n - 2)
        x = pow(a, d, n)  # a^d % n
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True
n=int(input())
i=1



while(n>pow(2, 43)):
    factors = pollards_rho(n)
    print(f"{i}번째 N의 소인수: {factors}")
    n=n//factors
    i=i+1





#ncat 158.247.225.252 13370
"""
n = 50
N = 1087226603280000366206571222054100209257696227070613953019668841643564228004287466254550134203293792315108859009061415165341747472352708336467548610946722911452704921099819105579346744431865125134758822639763761831679564433077884506392075334253334456619836764442548041869173438515381632076983443748456059138827458087985102433579190738952328668692750673805032807119113496869981793468046802843046835912869552419781518262963588875568389908612870982729153416530816981204041252293625997118441905230025798324030567834457618121190501132417199649147645678935529694357475108347812901001152144322513442558001287418170391       
p1= 1213060872631
c = 1086417849909722220915018130778061595592259304650524821959256395683500295308742164986095962694651050329252563732155034647589476306823948542469027370034522987052620657971006324629460557609427918084013471536519487606204032266147335098880723477541438297657422469016608447403258707326435416329066067233724689593504034279323893321163579615968364855401741216825122823313611328943423713977783279267329477127585327392757283050073230571462799951812710976167486616358901877987324512341970220420285643738750624524613826717557489278240280922516141590307290831821848898577230315114022527309798376320879537377108512176932203 
"""
"""
n = 47
N = 25498437479193812020777110459968158402619990158472522955224506285294192706698237868343091337327872701381337218151820390202220757322378844511169578790415039311264032990960024023529043921867027199935356823698388929686864405034154012931620121117002678301283091880892970660814036804813343382964951402707343257289212030266590936322530780297792795916297630860603154246694748290581679914779612151374349028175976541164373971110591694116894862679349196798694231226248747069569105999271096987516973809307198693348426918201602531129441527381041240420164392442964288716885163297931591585977779432137472019758509893059132601      
c = 1087679967353299576170088352137221678021812743767172868834468484194780764966614148190738172808030468009448613279760201136173097451369556038774491396562707487033043104208547986060920973492297652049953875700609876545003804046362417505281063742898070909535337412319044080619120542782612553419909888299902823613513763902234187221682995863380991231218345654286860725844263167605681344755560430693028265728840329600066819277594670733343334103667996121442618009781375973128586734080974207215352968199163826365993079971913305588493539652101818725330868635015272439289371228808774341911400191432205237015787547380374839
"""